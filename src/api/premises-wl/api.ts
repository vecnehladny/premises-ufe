/* tslint:disable */
/* eslint-disable */
/**
 * Room List API
 * Hospital Room List management for Web-In-Cloud system
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: pfx@google.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface RoomEntry
 */
export interface RoomEntry {
    /**
     * Unique id of the room in this list
     * @type {string}
     * @memberof RoomEntry
     */
    'id': string;
    /**
     * Type of the room (e.g., ICU, surgery, general)
     * @type {string}
     * @memberof RoomEntry
     */
    'type': string;
    /**
     * Current occupancy status (e.g., Occupied, Available)
     * @type {string}
     * @memberof RoomEntry
     */
    'status': string;
    /**
     * Number of beds in the room
     * @type {number}
     * @memberof RoomEntry
     */
    'capacity': number;
}

/**
 * RoomsListApi - axios parameter creator
 * @export
 */
export const RoomsListApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this method to store new room into the room list.
         * @summary Saves new room into room list
         * @param {string} buildingId Pass the ID of the particular building
         * @param {RoomEntry} roomEntry Room entry to store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoomEntry: async (buildingId: string, roomEntry: RoomEntry, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'buildingId' is not null or undefined
            assertParamExists('createRoomEntry', 'buildingId', buildingId)
            // verify required parameter 'roomEntry' is not null or undefined
            assertParamExists('createRoomEntry', 'roomEntry', roomEntry)
            const localVarPath = `/rooms-list/{buildingId}/rooms`
                .replace(`{${"buildingId"}}`, encodeURIComponent(String(buildingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(roomEntry, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to delete the specific room from the room list.
         * @summary Deletes specific room entry
         * @param {string} buildingId Pass the ID of the particular building
         * @param {string} roomId Pass the ID of the particular room
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoomEntry: async (buildingId: string, roomId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'buildingId' is not null or undefined
            assertParamExists('deleteRoomEntry', 'buildingId', buildingId)
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('deleteRoomEntry', 'roomId', roomId)
            const localVarPath = `/rooms-list/{buildingId}/rooms/{roomId}`
                .replace(`{${"buildingId"}}`, encodeURIComponent(String(buildingId)))
                .replace(`{${"roomId"}}`, encodeURIComponent(String(roomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * By using buildingId and roomId, you can get details of a particular room.
         * @summary Provides details about room entry
         * @param {string} buildingId Pass the ID of the particular building
         * @param {string} roomId Pass the ID of the particular room
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoomEntry: async (buildingId: string, roomId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'buildingId' is not null or undefined
            assertParamExists('getRoomEntry', 'buildingId', buildingId)
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('getRoomEntry', 'roomId', roomId)
            const localVarPath = `/rooms-list/{buildingId}/rooms/{roomId}`
                .replace(`{${"buildingId"}}`, encodeURIComponent(String(buildingId)))
                .replace(`{${"roomId"}}`, encodeURIComponent(String(roomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * By using buildingId, you get a list of rooms in a specific building
         * @summary Provides the room list for a specific building
         * @param {string} buildingId Pass the ID of the particular building
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoomList: async (buildingId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'buildingId' is not null or undefined
            assertParamExists('getRoomList', 'buildingId', buildingId)
            const localVarPath = `/rooms-list/{buildingId}/rooms`
                .replace(`{${"buildingId"}}`, encodeURIComponent(String(buildingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to update content of the room entry.
         * @summary Updates specific room entry
         * @param {string} buildingId Pass the ID of the particular building
         * @param {string} roomId Pass the ID of the particular room
         * @param {RoomEntry} roomEntry Room entry to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoomEntry: async (buildingId: string, roomId: string, roomEntry: RoomEntry, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'buildingId' is not null or undefined
            assertParamExists('updateRoomEntry', 'buildingId', buildingId)
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('updateRoomEntry', 'roomId', roomId)
            // verify required parameter 'roomEntry' is not null or undefined
            assertParamExists('updateRoomEntry', 'roomEntry', roomEntry)
            const localVarPath = `/rooms-list/{buildingId}/rooms/{roomId}`
                .replace(`{${"buildingId"}}`, encodeURIComponent(String(buildingId)))
                .replace(`{${"roomId"}}`, encodeURIComponent(String(roomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(roomEntry, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RoomsListApi - functional programming interface
 * @export
 */
export const RoomsListApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RoomsListApiAxiosParamCreator(configuration)
    return {
        /**
         * Use this method to store new room into the room list.
         * @summary Saves new room into room list
         * @param {string} buildingId Pass the ID of the particular building
         * @param {RoomEntry} roomEntry Room entry to store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRoomEntry(buildingId: string, roomEntry: RoomEntry, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRoomEntry(buildingId, roomEntry, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this method to delete the specific room from the room list.
         * @summary Deletes specific room entry
         * @param {string} buildingId Pass the ID of the particular building
         * @param {string} roomId Pass the ID of the particular room
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRoomEntry(buildingId: string, roomId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRoomEntry(buildingId, roomId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * By using buildingId and roomId, you can get details of a particular room.
         * @summary Provides details about room entry
         * @param {string} buildingId Pass the ID of the particular building
         * @param {string} roomId Pass the ID of the particular room
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoomEntry(buildingId: string, roomId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRoomEntry(buildingId, roomId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * By using buildingId, you get a list of rooms in a specific building
         * @summary Provides the room list for a specific building
         * @param {string} buildingId Pass the ID of the particular building
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoomList(buildingId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoomEntry>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRoomList(buildingId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this method to update content of the room entry.
         * @summary Updates specific room entry
         * @param {string} buildingId Pass the ID of the particular building
         * @param {string} roomId Pass the ID of the particular room
         * @param {RoomEntry} roomEntry Room entry to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRoomEntry(buildingId: string, roomId: string, roomEntry: RoomEntry, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRoomEntry(buildingId, roomId, roomEntry, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RoomsListApi - factory interface
 * @export
 */
export const RoomsListApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RoomsListApiFp(configuration)
    return {
        /**
         * Use this method to store new room into the room list.
         * @summary Saves new room into room list
         * @param {string} buildingId Pass the ID of the particular building
         * @param {RoomEntry} roomEntry Room entry to store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoomEntry(buildingId: string, roomEntry: RoomEntry, options?: any): AxiosPromise<RoomEntry> {
            return localVarFp.createRoomEntry(buildingId, roomEntry, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to delete the specific room from the room list.
         * @summary Deletes specific room entry
         * @param {string} buildingId Pass the ID of the particular building
         * @param {string} roomId Pass the ID of the particular room
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoomEntry(buildingId: string, roomId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteRoomEntry(buildingId, roomId, options).then((request) => request(axios, basePath));
        },
        /**
         * By using buildingId and roomId, you can get details of a particular room.
         * @summary Provides details about room entry
         * @param {string} buildingId Pass the ID of the particular building
         * @param {string} roomId Pass the ID of the particular room
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoomEntry(buildingId: string, roomId: string, options?: any): AxiosPromise<RoomEntry> {
            return localVarFp.getRoomEntry(buildingId, roomId, options).then((request) => request(axios, basePath));
        },
        /**
         * By using buildingId, you get a list of rooms in a specific building
         * @summary Provides the room list for a specific building
         * @param {string} buildingId Pass the ID of the particular building
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoomList(buildingId: string, options?: any): AxiosPromise<Array<RoomEntry>> {
            return localVarFp.getRoomList(buildingId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to update content of the room entry.
         * @summary Updates specific room entry
         * @param {string} buildingId Pass the ID of the particular building
         * @param {string} roomId Pass the ID of the particular room
         * @param {RoomEntry} roomEntry Room entry to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoomEntry(buildingId: string, roomId: string, roomEntry: RoomEntry, options?: any): AxiosPromise<RoomEntry> {
            return localVarFp.updateRoomEntry(buildingId, roomId, roomEntry, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RoomsListApi - interface
 * @export
 * @interface RoomsListApi
 */
export interface RoomsListApiInterface {
    /**
     * Use this method to store new room into the room list.
     * @summary Saves new room into room list
     * @param {string} buildingId Pass the ID of the particular building
     * @param {RoomEntry} roomEntry Room entry to store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsListApiInterface
     */
    createRoomEntry(buildingId: string, roomEntry: RoomEntry, options?: AxiosRequestConfig): AxiosPromise<RoomEntry>;

    /**
     * Use this method to delete the specific room from the room list.
     * @summary Deletes specific room entry
     * @param {string} buildingId Pass the ID of the particular building
     * @param {string} roomId Pass the ID of the particular room
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsListApiInterface
     */
    deleteRoomEntry(buildingId: string, roomId: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * By using buildingId and roomId, you can get details of a particular room.
     * @summary Provides details about room entry
     * @param {string} buildingId Pass the ID of the particular building
     * @param {string} roomId Pass the ID of the particular room
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsListApiInterface
     */
    getRoomEntry(buildingId: string, roomId: string, options?: AxiosRequestConfig): AxiosPromise<RoomEntry>;

    /**
     * By using buildingId, you get a list of rooms in a specific building
     * @summary Provides the room list for a specific building
     * @param {string} buildingId Pass the ID of the particular building
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsListApiInterface
     */
    getRoomList(buildingId: string, options?: AxiosRequestConfig): AxiosPromise<Array<RoomEntry>>;

    /**
     * Use this method to update content of the room entry.
     * @summary Updates specific room entry
     * @param {string} buildingId Pass the ID of the particular building
     * @param {string} roomId Pass the ID of the particular room
     * @param {RoomEntry} roomEntry Room entry to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsListApiInterface
     */
    updateRoomEntry(buildingId: string, roomId: string, roomEntry: RoomEntry, options?: AxiosRequestConfig): AxiosPromise<RoomEntry>;

}

/**
 * RoomsListApi - object-oriented interface
 * @export
 * @class RoomsListApi
 * @extends {BaseAPI}
 */
export class RoomsListApi extends BaseAPI implements RoomsListApiInterface {
    /**
     * Use this method to store new room into the room list.
     * @summary Saves new room into room list
     * @param {string} buildingId Pass the ID of the particular building
     * @param {RoomEntry} roomEntry Room entry to store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsListApi
     */
    public createRoomEntry(buildingId: string, roomEntry: RoomEntry, options?: AxiosRequestConfig) {
        return RoomsListApiFp(this.configuration).createRoomEntry(buildingId, roomEntry, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to delete the specific room from the room list.
     * @summary Deletes specific room entry
     * @param {string} buildingId Pass the ID of the particular building
     * @param {string} roomId Pass the ID of the particular room
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsListApi
     */
    public deleteRoomEntry(buildingId: string, roomId: string, options?: AxiosRequestConfig) {
        return RoomsListApiFp(this.configuration).deleteRoomEntry(buildingId, roomId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * By using buildingId and roomId, you can get details of a particular room.
     * @summary Provides details about room entry
     * @param {string} buildingId Pass the ID of the particular building
     * @param {string} roomId Pass the ID of the particular room
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsListApi
     */
    public getRoomEntry(buildingId: string, roomId: string, options?: AxiosRequestConfig) {
        return RoomsListApiFp(this.configuration).getRoomEntry(buildingId, roomId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * By using buildingId, you get a list of rooms in a specific building
     * @summary Provides the room list for a specific building
     * @param {string} buildingId Pass the ID of the particular building
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsListApi
     */
    public getRoomList(buildingId: string, options?: AxiosRequestConfig) {
        return RoomsListApiFp(this.configuration).getRoomList(buildingId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to update content of the room entry.
     * @summary Updates specific room entry
     * @param {string} buildingId Pass the ID of the particular building
     * @param {string} roomId Pass the ID of the particular room
     * @param {RoomEntry} roomEntry Room entry to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsListApi
     */
    public updateRoomEntry(buildingId: string, roomId: string, roomEntry: RoomEntry, options?: AxiosRequestConfig) {
        return RoomsListApiFp(this.configuration).updateRoomEntry(buildingId, roomId, roomEntry, options).then((request) => request(this.axios, this.basePath));
    }
}


